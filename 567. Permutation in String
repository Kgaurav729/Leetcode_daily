Given two strings s1 and s2, return true if s2 contains a 
permutation
 of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.


def checkInclusion(self, s1: str, s2: str) -> bool:
        def isMatched(List1,List2):
            for i in range(len(List1)):
                if List1[i] != List2[i]:
                    return False
            return True
       

        if len(s1) > len(s2):
            return False

        List1 = [0] * 26  
        List2 = [0] * 26  

        for char in s1:
            List1[ord(char) - ord('a')] += 1

        l1 = len(s1)
        l2 = len(s2)

        for i in range(l1):
            List2[ord(s2[i]) - ord('a')] += 1

        for i in range(l2 - l1):
            if isMatched(List1,List2):
                return True
