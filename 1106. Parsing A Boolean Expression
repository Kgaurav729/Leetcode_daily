A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:

't' that evaluates to true.
'f' that evaluates to false.
'!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr.
'&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
'|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
Given a string expression that represents a boolean expression, return the evaluation of that expression.

It is guaranteed that the given expression is valid and follows the given rules.

 

Example 1:

Input: expression = "&(|(f))"
Output: false
Explanation: 
First, evaluate |(f) --> f. The expression is now "&(f)".
Then, evaluate &(f) --> f. The expression is now "f".
Finally, return false.
Example 2:

Input: expression = "|(f,f,f,t)"
Output: true
Explanation: The evaluation of (false OR false OR false OR true) is true.
Example 3:

Input: expression = "!(&(f,t))"
Output: true
Explanation: 
First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now "!(f)".
Then, evaluate !(f) --> NOT false --> true. We return true.
 

Constraints:

1 <= expression.length <= 2 * 104
expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','.



class Solution:
    def parseBoolExpr(self, expression: str) -> bool:
        def checkboolean(arr, opr):
            if opr == '&':
                return all(arr)
            elif opr == '|':
                return any(arr)
            elif opr == '!':
                return not arr[0]
        stack = []
        for char in expression:
            if char == ')':
                arr = []
                while stack and stack[-1] != '(':
                    arr.append(stack.pop())
                stack.pop()

                if stack:
                    opr = stack.pop()
                    ans = checkboolean(arr[::-1], opr)
                    stack.append(ans)
            elif char != ',':
                if char in 'tf':
                    stack.append(char == 't')
                else:
                    stack.append(char) 
        return stack[0] if stack else False
            
        
